// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SPR.TestDataStorage.WebService.Data;

#nullable disable

namespace SPR.TestDataStorage.WebService.Migrations
{
    [DbContext(typeof(SPRTestDataStorageContext))]
    [Migration("20221106031915_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SPR.TestDataStorage.WebService.Models.DataContentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("public.gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DataHeaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("data_header_id");

                    b.Property<string>("DataSections")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("data_sections");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DataHeaderId", "Hash" }, "data_content_data_header_id_hash_key")
                        .IsUnique();

                    b.ToTable("data_content", "data");
                });

            modelBuilder.Entity("SPR.TestDataStorage.WebService.Models.DataHeaderModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("public.gen_random_uuid()");

                    b.Property<string>("DataName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data_name");

                    b.Property<string>("ObjectIdentity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("object_identity");

                    b.Property<Guid>("ObjectTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("object_type_id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id");

                    b.HasIndex("ObjectTypeId");

                    b.HasIndex(new[] { "ProjectId", "ObjectTypeId", "ObjectIdentity", "DataName" }, "data_header_project_id_object_type_id_object_identity_data__key")
                        .IsUnique();

                    b.ToTable("data_header", "data");
                });

            modelBuilder.Entity("SPR.TestDataStorage.WebService.Models.DataSectionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("public.gen_random_uuid()");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("system_name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SystemName" }, "data_section_system_name_key")
                        .IsUnique();

                    b.ToTable("data_section", "data");
                });

            modelBuilder.Entity("SPR.TestDataStorage.WebService.Models.ObjectTypeDataSectionModel", b =>
                {
                    b.Property<Guid>("DataSectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("data_section_id");

                    b.Property<Guid>("ObjectTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("object_type_id");

                    b.HasIndex("DataSectionId");

                    b.HasIndex(new[] { "ObjectTypeId", "DataSectionId" }, "object_type_data_section_object_type_id_data_section_id_key")
                        .IsUnique();

                    b.ToTable("object_type_data_section", "data");
                });

            modelBuilder.Entity("SPR.TestDataStorage.WebService.Models.ObjectTypeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("public.gen_random_uuid()");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("system_name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SystemName" }, "object_type_system_name_key")
                        .IsUnique();

                    b.ToTable("object_type", "data");
                });

            modelBuilder.Entity("SPR.TestDataStorage.WebService.Models.ProjectModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("public.gen_random_uuid()");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("system_name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SystemName" }, "project_system_name_key")
                        .IsUnique();

                    b.ToTable("project", "data");
                });

            modelBuilder.Entity("SPR.TestDataStorage.WebService.Models.DataContentModel", b =>
                {
                    b.HasOne("SPR.TestDataStorage.WebService.Models.DataHeaderModel", "DataHeader")
                        .WithMany("DataContents")
                        .HasForeignKey("DataHeaderId")
                        .IsRequired()
                        .HasConstraintName("data_content_data_header_id_fkey");

                    b.Navigation("DataHeader");
                });

            modelBuilder.Entity("SPR.TestDataStorage.WebService.Models.DataHeaderModel", b =>
                {
                    b.HasOne("SPR.TestDataStorage.WebService.Models.ObjectTypeModel", "ObjectType")
                        .WithMany("DataHeaders")
                        .HasForeignKey("ObjectTypeId")
                        .IsRequired()
                        .HasConstraintName("data_header_object_type_id_fkey");

                    b.HasOne("SPR.TestDataStorage.WebService.Models.ProjectModel", "Project")
                        .WithMany("DataHeaders")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("data_header_project_id_fkey");

                    b.Navigation("ObjectType");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SPR.TestDataStorage.WebService.Models.ObjectTypeDataSectionModel", b =>
                {
                    b.HasOne("SPR.TestDataStorage.WebService.Models.DataSectionModel", "DataSection")
                        .WithMany()
                        .HasForeignKey("DataSectionId")
                        .IsRequired()
                        .HasConstraintName("object_type_data_section_data_section_id_fkey");

                    b.HasOne("SPR.TestDataStorage.WebService.Models.ObjectTypeModel", "ObjectType")
                        .WithMany()
                        .HasForeignKey("ObjectTypeId")
                        .IsRequired()
                        .HasConstraintName("object_type_data_section_object_type_id_fkey");

                    b.Navigation("DataSection");

                    b.Navigation("ObjectType");
                });

            modelBuilder.Entity("SPR.TestDataStorage.WebService.Models.DataHeaderModel", b =>
                {
                    b.Navigation("DataContents");
                });

            modelBuilder.Entity("SPR.TestDataStorage.WebService.Models.ObjectTypeModel", b =>
                {
                    b.Navigation("DataHeaders");
                });

            modelBuilder.Entity("SPR.TestDataStorage.WebService.Models.ProjectModel", b =>
                {
                    b.Navigation("DataHeaders");
                });
#pragma warning restore 612, 618
        }
    }
}
